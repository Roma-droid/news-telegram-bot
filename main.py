import telebot
import requests
import json
import pycountry
import sqlite3
import time

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
BOT_TOKEN = 'YOURTOKEN'  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ç–æ–∫–µ–Ω –æ—Ç @BotFather
LM_STUDIO_URL = "http://localhost:1234/v1/chat/completions"  # URL LM Studio API
HEADERS = {"Content-Type": "application/json"}
NOMINATIM_API = "https://nominatim.openstreetmap.org/reverse"  # API –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω—ã
DATABASE_NAME = "news_bot_users.db"

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
bot = telebot.TeleBot(BOT_TOKEN)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_database():
    conn = sqlite3.connect(DATABASE_NAME)
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            chat_id INTEGER PRIMARY KEY,
            country TEXT
        )
    ''')
    conn.commit()
    conn.close()

def get_user_country(chat_id):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç—Ä–∞–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    try:
        conn = sqlite3.connect(DATABASE_NAME)
        cursor = conn.cursor()
        cursor.execute("SELECT country FROM users WHERE chat_id = ?", (chat_id,))
        result = cursor.fetchone()
        return result[0] if result else None
    except sqlite3.Error as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç—Ä–∞–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        return None
    finally:
        conn.close()

def set_user_country(chat_id, country):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å—Ç—Ä–∞–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    try:
        conn = sqlite3.connect(DATABASE_NAME)
        cursor = conn.cursor()
        cursor.execute('''
            INSERT OR REPLACE INTO users (chat_id, country) 
            VALUES (?, ?)
        ''', (chat_id, country))
        conn.commit()
        return True
    except sqlite3.Error as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å—Ç—Ä–∞–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        return False
    finally:
        conn.close()

def get_country_name(lat, lon):
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å—Ç—Ä–∞–Ω—É –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º —Å –ø–æ–º–æ—â—å—é Nominatim API"""
    try:
        params = {
            'lat': lat,
            'lon': lon,
            'format': 'json',
            'addressdetails': 1,
            'accept-language': 'en'
        }
        
        headers = {
            'User-Agent': 'TelegramNewsBot/1.0'
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è —Å–æ–±–ª—é–¥–µ–Ω–∏—è –ø–æ–ª–∏—Ç–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        time.sleep(1)
        
        response = requests.get(NOMINATIM_API, params=params, headers=headers, timeout=10)
        response.raise_for_status()
        data = response.json()
        
        if data.get('address'):
            country = data['address'].get('country')
            country_code = data['address'].get('country_code', '').upper()
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å –∫–æ–¥ —Å—Ç—Ä–∞–Ω—ã, –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
            if country_code and len(country_code) == 2:
                try:
                    country_obj = pycountry.countries.get(alpha_2=country_code)
                    return country_obj.name
                except:
                    pass
            
            # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —á–µ—Ä–µ–∑ –∫–æ–¥, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–∑ –æ—Ç–≤–µ—Ç–∞
            if country:
                return country
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω—ã: {e}")
    return None

def generate_news_with_ai(topic="–Ω–æ–≤–æ—Å—Ç—å", country=None):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤–æ—Å—Ç—å —Å –ø–æ–º–æ—â—å—é LM Studio API"""
    prompts = {
        "–Ω–æ–≤–æ—Å—Ç—å": (
            "–ù–∞–ø–∏—à–∏ —Ä–µ–∞–ª—å–Ω—É—é –Ω–æ–≤–æ—Å—Ç—å –Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω—É—é —Ç–µ–º—É. "
            "{country_context} "
            "–§–æ—Ä–º–∞—Ç: –ó–∞–≥–æ–ª–æ–≤–æ–∫\n\n–ê–±–∑–∞—Ü 1\n\n–ê–±–∑–∞—Ü 2\n\n–ê–±–∑–∞—Ü 3"
        ),
        "–≥–ª–æ–±–∞–ª—å–Ω–æ–µ –ø–æ—Ç–µ–ø–ª–µ–Ω–∏–µ": (
            "–ù–∞–ø–∏—à–∏ –Ω–æ–≤–æ—Å—Ç—å –æ –≥–ª–æ–±–∞–ª—å–Ω–æ–º –ø–æ—Ç–µ–ø–ª–µ–Ω–∏–∏. "
            "{country_context} "
            "–ò—Å–ø–æ–ª—å–∑—É–π –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–∞—É—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ. "
            "–§–æ—Ä–º–∞—Ç: –ó–∞–≥–æ–ª–æ–≤–æ–∫\n\n–ê–±–∑–∞—Ü 1\n\n–ê–±–∑–∞—Ü 2"
        ),
        "–Ω–∞–≤–æ–¥–Ω–µ–Ω–∏–µ": (
            "–ù–∞–ø–∏—à–∏ –Ω–æ–≤–æ—Å—Ç—å –æ –Ω–∞–≤–æ–¥–Ω–µ–Ω–∏–∏ {country_article}. "
            "–£–∫–∞–∂–∏ –º–µ—Å—Ç–æ, –ø—Ä–∏—á–∏–Ω—ã, –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è. "
            "–§–æ—Ä–º–∞—Ç: –ó–∞–≥–æ–ª–æ–≤–æ–∫\n\n–ê–±–∑–∞—Ü 1\n\n–ê–±–∑–∞—Ü 2"
        )
    }
    
    country_context = f"–°—Ñ–æ–∫—É—Å–∏—Ä—É–π—Å—è –Ω–∞ {country}. " if country else ""
    country_article = f"–≤ {country}" if country else "–≤ –º–∏—Ä–µ"
    
    prompt = prompts.get(topic, prompts["–Ω–æ–≤–æ—Å—Ç—å"]).format(
        country_context=country_context,
        country_article=country_article
    )
    
    data = {
        "messages": [
            {"role": "system", "content": "–¢—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∂—É—Ä–Ω–∞–ª–∏—Å—Ç."},
            {"role": "user", "content": prompt}
        ],
        "temperature": 0.7,
        "max_tokens": 600,
        "stop": ["<|im_end|>"]
    }
    
    try:
        response = requests.post(LM_STUDIO_URL, headers=HEADERS, data=json.dumps(data))
        response.raise_for_status()
        return response.json()['choices'][0]['message']['content']
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ—Å—Ç–∏: {e}")
        return None

# –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
@bot.message_handler(commands=['start'])
def send_welcome(message):
    text = (
        "üåç –ü—Ä–∏–≤–µ—Ç! –Ø –Ω–æ–≤–æ—Å—Ç–Ω–æ–π –±–æ—Ç.\n\n"
        "–û—Ç–ø—Ä–∞–≤—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—ã:\n"
        "/news - –ù–æ–≤–æ—Å—Ç–∏\n"
        "/global_warming - –ö–ª–∏–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –Ω–æ–≤–æ—Å—Ç–∏\n"
        "/flood - –ù–æ–≤–æ—Å—Ç–∏ –æ –Ω–∞–≤–æ–¥–Ω–µ–Ω–∏—è—Ö\n"
        "/set_country - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω—É\n"
        "/my_country - –¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∞"
    )
    bot.reply_to(message, text)

@bot.message_handler(commands=['set_country'])
def set_country(message):
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã:")
    bot.register_next_step_handler(msg, process_country)

def process_country(message):
    try:
        country = pycountry.countries.search_fuzzy(message.text.strip())[0]
        if set_user_country(message.chat.id, country.name):
            bot.send_message(message.chat.id, f"–°—Ç—Ä–∞–Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {country.name}")
        else:
            bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
    except:
        bot.send_message(message.chat.id, "–°—Ç—Ä–∞–Ω–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞")

@bot.message_handler(commands=['my_country'])
def show_country(message):
    country = get_user_country(message.chat.id)
    if country:
        bot.send_message(message.chat.id, f"–í–∞—à–∞ —Å—Ç—Ä–∞–Ω–∞: {country}")
    else:
        bot.send_message(message.chat.id, "–°—Ç—Ä–∞–Ω–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")

@bot.message_handler(content_types=['location'])
def handle_location(message):
    country = get_country_name(message.location.latitude, message.location.longitude)
    if country and set_user_country(message.chat.id, country):
        bot.send_message(message.chat.id, f"–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ —Å—Ç—Ä–∞–Ω–∞: {country}")
    else:
        bot.send_message(message.chat.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å—Ç—Ä–∞–Ω—É")

def send_news(message, topic):
    country = get_user_country(message.chat.id)
    msg = bot.send_message(message.chat.id, "‚åõ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –Ω–æ–≤–æ—Å—Ç—å...")
    
    news = generate_news_with_ai(topic, country)
    if news:
        bot.edit_message_text(
            chat_id=message.chat.id,
            message_id=msg.message_id,
            text=f"üìå {news}",
            parse_mode='Markdown'
        )
    else:
        bot.edit_message_text(
            chat_id=message.chat.id,
            message_id=msg.message_id,
            text="‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"
        )

@bot.message_handler(commands=['news'])
def news_command(message):
    send_news(message, "–Ω–æ–≤–æ—Å—Ç—å")

@bot.message_handler(commands=['global_warming'])
def climate_command(message):
    send_news(message, "–≥–ª–æ–±–∞–ª—å–Ω–æ–µ –ø–æ—Ç–µ–ø–ª–µ–Ω–∏–µ")

@bot.message_handler(commands=['flood'])
def flood_command(message):
    send_news(message, "–Ω–∞–≤–æ–¥–Ω–µ–Ω–∏–µ")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    init_database()
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")

    bot.infinity_polling()
